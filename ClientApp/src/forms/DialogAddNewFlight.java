/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import client.RequestGenerator;
import controler.Controler;
import domain.Airplane;
import domain.Airport;
import domain.Flight;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JOptionPane;
import transfer.Operation;
import transfer.Request;

/**
 *
 * @author Aleksa
 */
public class DialogAddNewFlight extends javax.swing.JDialog {

    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd.MM.yyyy");

    /**
     * Creates new form DialogAddNewFlight
     */
    public DialogAddNewFlight(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        prepareAirplane();
        prepareAirport();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmbAirplane = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cmbDepartureAirport = new javax.swing.JComboBox<>();
        cmbArrivalAirport = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        txtPrice = new javax.swing.JTextField();
        txtDuration = new javax.swing.JTextField();
        txtLength = new javax.swing.JTextField();
        txtDepartureDate = new javax.swing.JTextField();
        txtArrivalDate = new javax.swing.JTextField();
        btnAddFlight = new javax.swing.JButton();

        jLabel5.setText("jLabel5");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Flight");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Add new flight"));

        jLabel1.setText("Arrival date:");

        jLabel2.setText("Departure date:");

        jLabel3.setText("Length:");

        jLabel4.setText("Duration:");

        jLabel6.setText("Price:");

        jLabel7.setText("Airplane:");

        cmbAirplane.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAirplaneActionPerformed(evt);
            }
        });

        jLabel8.setText("Arrival airport:");

        jLabel9.setText("Departure airport:");

        cmbDepartureAirport.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbArrivalAirport.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel10.setText("Description:");

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        btnAddFlight.setText("Add");
        btnAddFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFlightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtDepartureDate, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtLength, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDuration, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrice, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbAirplane, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbArrivalAirport, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbDepartureAirport, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                            .addComponent(txtArrivalDate)))
                    .addComponent(btnAddFlight, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(txtArrivalDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(txtDepartureDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(txtLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmbAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbArrivalAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cmbDepartureAirport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnAddFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAirplaneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbAirplaneActionPerformed

    private void btnAddFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFlightActionPerformed
        if (txtArrivalDate.getText().isEmpty() || txtDepartureDate.getText().isEmpty() || txtDuration.getText().isEmpty() || txtLength.getText().isEmpty() || txtPrice.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You need to enter all fields.");
        } else {
            String dateArr = txtArrivalDate.getText();
            String dateDep = txtDepartureDate.getText();
            LocalDate arrivalDate;
            LocalDate departureDate;
            try {
                arrivalDate = LocalDate.parse(dateArr, dtf);
                departureDate = LocalDate.parse(dateDep, dtf);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Date must be in format: dd.MM.yyyy");
                return;
            }
            
            if (departureDate.isAfter(arrivalDate)) {
                JOptionPane.showMessageDialog(this, "Depart date must be before arrival date");
                return;
            }

            String l = txtLength.getText();
            double length;
            try {
                length = Double.parseDouble(l);
            } catch (NumberFormatException numberFormatException) {
                JOptionPane.showMessageDialog(this, "Length must be double.");
                return;
            }
            if(length < 0) {
                JOptionPane.showMessageDialog(this, "Length must be positive.");
                return;
            }

            String d = txtDuration.getText();
            int duration;
            try {
                duration = Integer.parseInt(d);
            } catch (NumberFormatException numberFormatException) {
                JOptionPane.showMessageDialog(this, "Duration must be number.");
                return;
            }
            if(duration < 0) {
                JOptionPane.showMessageDialog(this, "Duration must be positive.");
                return;
            }

            String p = txtPrice.getText();
            double price;
            try {
                price = Double.parseDouble(p);
            } catch (NumberFormatException numberFormatException) {
                JOptionPane.showMessageDialog(this, "Price must be double.");
                return;
            }
            if(price < 0) {
                JOptionPane.showMessageDialog(this, "Price must be positive.");
                return;
            }

            String description = txtDescription.getText();

            Airplane airplane = (Airplane) cmbAirplane.getSelectedItem();
            Airport arrivalAir = (Airport) cmbArrivalAirport.getSelectedItem();
            Airport departureAir = (Airport) cmbDepartureAirport.getSelectedItem();

            if (arrivalAir.equals(departureAir)) {
                JOptionPane.showMessageDialog(this, "Arrival airport can not be same as departure airport.");
                return;
            }

            Flight f = new Flight(-1, arrivalDate, departureDate, length,duration, description, price, airplane, arrivalAir, departureAir);
            
            
            RequestGenerator.getInstance().sendRequest(new Request(Operation.ADDNEWFLIGHT, f));
        }
    }//GEN-LAST:event_btnAddFlightActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogAddNewFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogAddNewFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogAddNewFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogAddNewFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogAddNewFlight dialog = new DialogAddNewFlight(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFlight;
    private javax.swing.JComboBox<Object> cmbAirplane;
    private javax.swing.JComboBox<Object> cmbArrivalAirport;
    private javax.swing.JComboBox<Object> cmbDepartureAirport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtArrivalDate;
    private javax.swing.JTextField txtDepartureDate;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtDuration;
    private javax.swing.JTextField txtLength;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables

    private void prepareAirplane() {
        RequestGenerator.getInstance().sendRequest(new Request(Operation.GETAIRPLANE, null));
    }

    public void prepareCMBAirplane() {
        List<Airplane> airplanes = Controler.getInstance().getAirplanes();
        cmbAirplane.removeAllItems();
        for (Airplane airplane : airplanes) {
            cmbAirplane.addItem(airplane);
        }
    }

    private void prepareAirport() {
        RequestGenerator.getInstance().sendRequest(new Request(Operation.GETAIRPORT, null));
    }

    public void prepareCMBAirport() {
        List<Airport> airports = Controler.getInstance().getAirports();
        cmbArrivalAirport.removeAllItems();
        cmbDepartureAirport.removeAllItems();
        for (Airport airport : airports) {
            cmbArrivalAirport.addItem(airport);
            cmbDepartureAirport.addItem(airport);
        }
    }
}
